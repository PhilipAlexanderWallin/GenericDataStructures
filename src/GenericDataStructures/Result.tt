<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#if NULLABLE_REFERENCE_TYPES_SUPPORTED
#nullable disable warnings
#endif
using System;
#if NULLABLE_REFERENCE_TYPES_SUPPORTED
using System.Diagnostics.CodeAnalysis;
#endif
using JetBrains.Annotations;
using NotNullAttribute = JetBrains.Annotations.NotNullAttribute;

namespace GenericDataStructures
{
<#
    for(int failureTypes = 1; failureTypes <= GetNumberOfFailureTypes(); failureTypes++)
    {
#>
    public struct <#= GetClassName(failureTypes) #>
    {
        private readonly object _value;
        private readonly byte? _failureTypeIndex;

        public Result(TSuccess value)
        {
            _value = value;
            _failureTypeIndex = null;
        }

<#
    for(int failureIndex = 0; failureIndex < failureTypes; failureIndex++)
    {
#>
        public Result(TFailure<#= failureIndex + 1 #> value)
        {
            _value = value;
            _failureTypeIndex = <#= failureIndex #>;
        }

<#
    }
#>
        public bool IsSuccess => !_failureTypeIndex.HasValue;

        private TSuccess SuccessValue => _value != null ? (TSuccess)_value : default(TSuccess);

        private object Value => IsSuccess ? SuccessValue : _value;

        public static implicit operator <#= GetClassName(failureTypes) #>(TSuccess value) => new <#= GetClassName(failureTypes) #>(value);

<#
    for(int failureIndex = 0; failureIndex < failureTypes; failureIndex++)
    {
#>
        public static implicit operator <#= GetClassName(failureTypes) #>(TFailure<#= failureIndex + 1 #> value) => new <#= GetClassName(failureTypes) #>(value);

<#
    }
#>
        public static bool operator ==(<#= GetClassName(failureTypes) #> left, <#= GetClassName(failureTypes) #> right) => Equals(left, right);

        public static bool operator !=(<#= GetClassName(failureTypes) #> left, <#= GetClassName(failureTypes) #> right) => !Equals(left, right);

#if NULLABLE_REFERENCE_TYPES_SUPPORTED
        public bool TryGetSuccessValue([MaybeNullWhen(false)] out TSuccess successValue)
#else
        public bool TryGetSuccessValue(out TSuccess successValue)
#endif
        {
            if (IsSuccess)
            {
                successValue = SuccessValue;
                return true;
            }

            successValue = default(TSuccess);
            return false;
        }

#if NULLABLE_REFERENCE_TYPES_SUPPORTED
        public bool TryMap<TOutput>([InstantHandle][NotNull]Func<TSuccess, TOutput> onSuccessFunc, [MaybeNullWhen(false)] out TOutput mappedValue)
#else
        public bool TryMap<TOutput>([InstantHandle][NotNull]Func<TSuccess, TOutput> onSuccessFunc, out TOutput mappedValue)
#endif
        {
            if (IsSuccess)
            {
                if (onSuccessFunc == null)
                {
                    throw new ArgumentException($"No map function provided");
                }

                mappedValue = onSuccessFunc(SuccessValue);
                return true;
            }

            mappedValue = default(TOutput);
            return false;
        }

        public TOutput Map<TOutput>([InstantHandle][NotNull]Func<TSuccess, TOutput> onSuccessFunc, <# Write(string.Join(", ", Enumerable.Range(1, failureTypes).Select(failureNumber => $"[InstantHandle][NotNull]Func<TFailure{failureNumber}, TOutput> onFailure{failureNumber}Func"))); #>)
        {
            switch (_failureTypeIndex)
            {
<#
    for(int failureIndex = 0; failureIndex < failureTypes; failureIndex++)
    {
#>
                case <#= failureIndex #>:
                    if (onFailure<#= failureIndex + 1 #>Func == null)
                    {
                        throw new ArgumentException($"No map function provided for {typeof(TFailure<#= failureIndex + 1 #>).Name}");
                    }

                    return onFailure<#= failureIndex + 1 #>Func((TFailure<#= failureIndex + 1 #>)_value);
<#
    }
#>
                default:
                    if (onSuccessFunc == null)
                    {
                        throw new ArgumentException($"No map function provided for {typeof(TSuccess).Name}");
                    }

                    return onSuccessFunc(SuccessValue);
            }
        }

        public void Switch([InstantHandle][NotNull]Action<TSuccess> onSuccessAction, <# Write(string.Join(", ", Enumerable.Range(1, failureTypes).Select(failureNumber => $"[InstantHandle][NotNull]Action<TFailure{failureNumber}> onFailure{failureNumber}Action"))); #>)
        {
            switch (_failureTypeIndex)
            {
<#
    for(int failureIndex = 0; failureIndex < failureTypes; failureIndex++)
    {
#>
                case <#= failureIndex #>:
                    if (onFailure<#= failureIndex + 1 #>Action == null)
                    {
                        throw new ArgumentException($"No switch action provided for {typeof(TFailure<#= failureIndex + 1 #>).Name}");
                    }

                    onFailure<#= failureIndex + 1 #>Action((TFailure<#= failureIndex + 1 #>)_value);
                    break;
<#
    }
#>
                default:
                    if (onSuccessAction == null)
                    {
                        throw new ArgumentException($"No switch action provided for {typeof(TSuccess).Name}");
                    }

                    onSuccessAction(SuccessValue);
                    break;
            }
        }

        public override bool Equals(object obj)
        {
            return obj is <#= GetClassName(failureTypes) #> other && Equals(Value, other.Value) && _failureTypeIndex == other._failureTypeIndex;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return ((Value != null ? Value.GetHashCode() : 0) * 397) ^ _failureTypeIndex.GetHashCode();
            }
        }

        public override string ToString()
        {
            return Value != null ? Value.ToString() : string.Empty;
        }
    }
<#
    if (failureTypes != GetNumberOfFailureTypes())
    {
        Write(Environment.NewLine);
    }    
#>
<#
    }
#>
}
<#+
private int GetNumberOfFailureTypes()
{
    return 15;
}
#>
<#+
private string GetClassName(int failureTypes)
{
    return $"Result<TSuccess, { string.Join(", ", Enumerable.Range(1, failureTypes).Select(failureNumber => $"TFailure{failureNumber}")) }>";
}
#>