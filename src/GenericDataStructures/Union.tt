<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace GenericDataStructures
{
<#
    for(int types = 1; types <= GetNumberOfTypes(); types++)
    {
#>
    public class <#= GetClassName(types) #>
    {
        private readonly object? _value;
        private readonly byte? _typeIndex;

<#
    for(int index = 0; index < types; index++)
    {
#>
        public Union(T<#= index + 1 #> value)
        {
            _value = value;
            _typeIndex = <#= index #>;
        }

<#
    }

    for(int index = 0; index < types; index++)
    {
#>
        public static implicit operator <#= GetClassName(types) #>(T<#= index + 1 #> value) => new <#= GetClassName(types) #>(value);

<#
    }
#>
        public TOutput Match<TOutput>(<# Write(string.Join(", ", Enumerable.Range(1, types).Select(number => $"Func<T{number}, TOutput> onT{number}Func"))); #>)
        {
            return _typeIndex switch
            {
<#
    for(int index = 0; index < types; index++)
    {
#>
                <#= index #> => onT<#= index + 1 #>Func((T<#= index + 1 #>)_value!),
<#
    }
#>
                _ => throw new InvalidOperationException()
            };
        }

        public void Match(<# Write(string.Join(", ", Enumerable.Range(1, types).Select(number => $"Action<T{number}> onT{number}Action"))); #>)
        {
            switch (_typeIndex)
            {
<#
    for(int index = 0; index < types; index++)
    {
#>
                case <#= index #>: onT<#= index + 1 #>Action((T<#= index + 1 #>)_value!); break;
<#
    }
#>
                default: throw new InvalidOperationException();
            }
        }
    }
<#
    if (types != GetNumberOfTypes())
    {
        Write(Environment.NewLine);
    }    
#>
<#
    }
#>
}
<#+
private int GetNumberOfTypes()
{
    return 8;
}
#>
<#+
private string GetClassName(int types)
{
    return $"Union<{ string.Join(", ", Enumerable.Range(1, types).Select(number => $"T{number}")) }>";
}
#>