<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#if NULLABLE_REFERENCE_TYPES_SUPPORTED
#nullable disable warnings
#endif
using System;
using JetBrains.Annotations;
using NotNullAttribute = JetBrains.Annotations.NotNullAttribute;

namespace GenericDataStructures
{
<#
    for(int types = 1; types <= GetNumberOfTypes(); types++)
    {
#>
    public struct <#= GetClassName(types) #>
    {
        private readonly object _value;
        private readonly byte _typeIndex;

<#
    for(int index = 0; index < types; index++)
    {
#>
        public Union(T<#= index + 1 #> value)
        {
            _value = value;
            _typeIndex = <#= index #>;
        }

<#
    }
#>
        private object Value
        {
            get
            {
                switch (_typeIndex)
                {
<#
    for(int index = 0; index < types; index++)
    {
#>
                    case <#= index #>:
                        return _value ?? default(T<#= index + 1 #>);
<#
    }
#>
                    default: throw new InvalidOperationException();
                }
            }
        }

<#
    for(int index = 0; index < types; index++)
    {
#>
        public static implicit operator <#= GetClassName(types) #>(T<#= index + 1 #> value) => new <#= GetClassName(types) #>(value);

<#
    }
#>
        public static bool operator ==(<#= GetClassName(types) #> left, <#= GetClassName(types) #> right) => Equals(left, right);

        public static bool operator !=(<#= GetClassName(types) #> left, <#= GetClassName(types) #> right) => !Equals(left, right);

        public TOutput Map<TOutput>(<# Write(string.Join(", ", Enumerable.Range(1, types).Select(number => $"[InstantHandle][NotNull]Func<T{number}, TOutput> onT{number}Func"))); #>)
        {
            switch (_typeIndex)
            {
<#
    for(int index = 0; index < types; index++)
    {
#>
                case <#= index #>:
                    if (onT<#= index + 1 #>Func == null)
                    {
                        throw new ArgumentException($"No map function provided for {typeof(T<#= index + 1 #>).Name}");
                    }

                    return onT<#= index + 1 #>Func((T<#= index + 1 #>)Value);
<#
    }
#>
                default: throw new InvalidOperationException();
            }
        }

        public void Switch(<# Write(string.Join(", ", Enumerable.Range(1, types).Select(number => $"[InstantHandle][NotNull]Action<T{number}> onT{number}Action"))); #>)
        {
            switch (_typeIndex)
            {
<#
    for(int index = 0; index < types; index++)
    {
#>
                case <#= index #>:
                    if (onT<#= index + 1 #>Action == null)
                    {
                        throw new ArgumentException($"No switch action provided for {typeof(T<#= index + 1 #>).Name}");
                    }

                    onT<#= index + 1 #>Action((T<#= index + 1 #>)Value);
                    break;
<#
    }
#>
                default: throw new InvalidOperationException();
            }
        }

        public override bool Equals(object obj)
        {
            return obj is <#= GetClassName(types) #> other && Equals(Value, other.Value) && _typeIndex == other._typeIndex;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return ((Value != null ? Value.GetHashCode() : 0) * 397) ^ _typeIndex.GetHashCode();
            }
        }

        public override string ToString()
        {
            return Value != null ? Value.ToString() : string.Empty;
        }
    }
<#
    if (types != GetNumberOfTypes())
    {
        Write(Environment.NewLine);
    }    
#>
<#
    }
#>
}
<#+
private int GetNumberOfTypes()
{
    return 16;
}
#>
<#+
private string GetClassName(int types)
{
    return $"Union<{ string.Join(", ", Enumerable.Range(1, types).Select(number => $"T{number}")) }>";
}
#>